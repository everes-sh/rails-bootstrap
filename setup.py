#!/usr/bin/env python3
"""
Ruby on Rails Development Environment Bootstrap Script for Ubuntu
================================================================

This script sets up a complete Ruby on Rails development environment on Ubuntu
using mise as the runtime manager. It's designed to be idempotent and safe to
run on fresh Ubuntu VMs.

Requirements:
- Ubuntu 20.04+ (tested on 22.04 LTS)
- Root or sudo privileges
- Internet connection

Author: Generated by Claude Code
License: MIT
"""

import os
import sys
import subprocess
import logging
import shutil
from pathlib import Path
from typing import List, Dict, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/tmp/setup.log')
    ]
)
logger = logging.getLogger(__name__)

class RailsBootstrap:
    """Bootstrap Ruby on Rails development environment on Ubuntu."""

    def __init__(self):
        self.user = os.environ.get('SUDO_USER', os.environ.get('USER', 'ubuntu'))
        self.user_home = Path(f'/home/{self.user}')
        self.mise_bin = '/usr/local/bin/mise'
        self.system_packages = [
            'build-essential',
            'curl',
            'git',
            'libpq-dev',
            'zlib1g-dev',
            'libssl-dev',
            'libreadline-dev',
            'libyaml-dev',
            'libsqlite3-dev',
            'sqlite3',
            'libxml2-dev',
            'libxslt1-dev',
            'libcurl4-openssl-dev',
            'libffi-dev',
            'nodejs',
            'npm',
            'postgresql',
            'postgresql-contrib',
            'postgresql-client'
        ]

    def run_command(self, cmd: List[str], check: bool = True, env: Optional[Dict] = None,
                   user: Optional[str] = None, cwd: Optional[str] = None) -> subprocess.CompletedProcess:
        """Execute a command with proper error handling and logging."""
        cmd_str = ' '.join(cmd)
        logger.info(f"Running: {cmd_str}")

        if user and user != 'root':
            cmd = ['sudo', '-u', user] + cmd

        try:
            result = subprocess.run(
                cmd,
                check=check,
                capture_output=True,
                text=True,
                env=env,
                cwd=cwd
            )
            if result.stdout:
                logger.debug(f"STDOUT: {result.stdout}")
            if result.stderr:
                logger.debug(f"STDERR: {result.stderr}")
            return result
        except subprocess.CalledProcessError as e:
            logger.error(f"Command failed: {cmd_str}")
            logger.error(f"Exit code: {e.returncode}")
            logger.error(f"STDOUT: {e.stdout}")
            logger.error(f"STDERR: {e.stderr}")
            raise

    def check_root(self):
        """Ensure script is run with appropriate privileges."""
        if os.geteuid() != 0:
            logger.error("This script must be run as root or with sudo")
            sys.exit(1)
        logger.info("‚úì Running with root privileges")

    def update_system(self):
        """Update system packages."""
        logger.info("üîÑ Updating system packages...")
        self.run_command(['apt-get', 'update'])
        self.run_command(['apt-get', 'upgrade', '-y'])
        logger.info("‚úì System packages updated")

    def install_system_packages(self):
        """Install essential system packages."""
        logger.info("üì¶ Installing system packages...")
        self.run_command(['apt-get', 'install', '-y'] + self.system_packages)
        logger.info("‚úì System packages installed")

    def install_mise(self):
        """Install mise runtime manager."""
        logger.info("üõ†Ô∏è  Installing mise...")

        # Check if mise is already installed
        if shutil.which('mise'):
            logger.info("‚úì mise already installed")
            return

        # Download and install mise
        install_script = """
        curl https://mise.jdx.dev/install.sh | sh
        """
        self.run_command(['bash', '-c', install_script])

        # Move mise to system location
        user_mise = self.user_home / '.local' / 'bin' / 'mise'
        if user_mise.exists():
            self.run_command(['cp', str(user_mise), self.mise_bin])
            self.run_command(['chmod', '+x', self.mise_bin])

        logger.info("‚úì mise installed")

    def configure_mise_path(self):
        """Configure mise to be available in PATH for all users."""
        logger.info("üîß Configuring mise PATH...")

        # Create profile.d script for system-wide availability
        profile_script = """#!/bin/bash
# mise configuration
export PATH="/usr/local/bin:$PATH"
if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate bash)"
fi
"""

        with open('/etc/profile.d/mise.sh', 'w') as f:
            f.write(profile_script)

        self.run_command(['chmod', '+x', '/etc/profile.d/mise.sh'])

        # Add to user's bashrc as well
        bashrc_path = self.user_home / '.bashrc'
        bashrc_content = """
# mise configuration
export PATH="/usr/local/bin:$PATH"
if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate bash)"
fi
"""

        if bashrc_path.exists():
            with open(bashrc_path, 'r') as f:
                current_content = f.read()

            if 'mise activate' not in current_content:
                with open(bashrc_path, 'a') as f:
                    f.write(bashrc_content)
                self.run_command(['chown', f'{self.user}:{self.user}', str(bashrc_path)])

        logger.info("‚úì mise PATH configured")

    def install_ruby_with_mise(self):
        """Install latest stable Ruby using mise."""
        logger.info("üíé Installing Ruby with mise...")

        env = os.environ.copy()
        env['PATH'] = f"/usr/local/bin:{env.get('PATH', '')}"

        # Install latest stable Ruby
        self.run_command([self.mise_bin, 'install', 'ruby@latest'], env=env, user=self.user)
        self.run_command([self.mise_bin, 'use', '--global', 'ruby@latest'], env=env, user=self.user)

        logger.info("‚úì Ruby installed")

    def install_nodejs_with_mise(self):
        """Install latest LTS Node.js using mise."""
        logger.info("üü¢ Installing Node.js with mise...")

        env = os.environ.copy()
        env['PATH'] = f"/usr/local/bin:{env.get('PATH', '')}"

        # Install latest LTS Node.js
        self.run_command([self.mise_bin, 'install', 'node@lts'], env=env, user=self.user)
        self.run_command([self.mise_bin, 'use', '--global', 'node@lts'], env=env, user=self.user)

        logger.info("‚úì Node.js installed")

    def install_yarn_with_mise(self):
        """Install Yarn using mise."""
        logger.info("üß∂ Installing Yarn with mise...")

        env = os.environ.copy()
        env['PATH'] = f"/usr/local/bin:{env.get('PATH', '')}"

        # Install Yarn
        self.run_command([self.mise_bin, 'install', 'yarn@latest'], env=env, user=self.user)
        self.run_command([self.mise_bin, 'use', '--global', 'yarn@latest'], env=env, user=self.user)

        logger.info("‚úì Yarn installed")

    def setup_postgresql(self):
        """Setup PostgreSQL server and create superuser."""
        logger.info("üêò Setting up PostgreSQL...")

        # Start and enable PostgreSQL service
        self.run_command(['systemctl', 'enable', 'postgresql'])
        self.run_command(['systemctl', 'start', 'postgresql'])

        # Create postgres superuser if it doesn't exist
        try:
            self.run_command([
                'sudo', '-u', 'postgres', 'psql', '-c',
                "SELECT 1 FROM pg_user WHERE usename = 'postgres';"
            ], check=True)
            logger.info("‚úì PostgreSQL superuser 'postgres' already exists")
        except subprocess.CalledProcessError:
            # Create the superuser
            self.run_command([
                'sudo', '-u', 'postgres', 'createuser', '--superuser', 'postgres'
            ])
            logger.info("‚úì PostgreSQL superuser 'postgres' created")

        # Set password for postgres user (optional, for development)
        self.run_command([
            'sudo', '-u', 'postgres', 'psql', '-c',
            "ALTER USER postgres PASSWORD 'postgres';"
        ])

        logger.info("‚úì PostgreSQL configured")

    def install_rails(self):
        """Install Rails globally."""
        logger.info("üöÇ Installing Rails...")

        env = os.environ.copy()
        env['PATH'] = f"/usr/local/bin:{env.get('PATH', '')}"

        # Source mise environment and install Rails
        install_cmd = f"""
        source /etc/profile.d/mise.sh
        eval "$(mise activate bash)"
        gem install rails --no-document
        """

        self.run_command(['bash', '-c', install_cmd], env=env, user=self.user)

        logger.info("‚úì Rails installed")

    def run(self):
        """Execute the complete bootstrap process."""
        logger.info("Starting Rails development environment bootstrap...")

        try:
            self.check_root()
            self.update_system()
            self.install_system_packages()
            self.install_mise()
            self.configure_mise_path()
            self.install_ruby_with_mise()
            self.install_nodejs_with_mise()
            self.install_yarn_with_mise()
            self.setup_postgresql()
            self.install_rails()

            logger.info("‚úÖ Bootstrap completed successfully!")
            logger.info("Your Ruby on Rails development environment is ready!")
            logger.info("Please run 'source ~/.bashrc' or start a new shell session to use the tools.")

        except Exception as e:
            logger.error(f"‚ùå Bootstrap failed: {str(e)}")
            sys.exit(1)

if __name__ == '__main__':
    bootstrap = RailsBootstrap()
    bootstrap.run()
